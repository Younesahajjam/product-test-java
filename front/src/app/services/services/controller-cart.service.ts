/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addProductsToCart } from '../fn/controller-cart/add-products-to-cart';
import { AddProductsToCart$Params } from '../fn/controller-cart/add-products-to-cart';
import { Cart } from '../models/cart';
import { CartDto } from '../models/cart-dto';
import { deleteProductFromCart } from '../fn/controller-cart/delete-product-from-cart';
import { DeleteProductFromCart$Params } from '../fn/controller-cart/delete-product-from-cart';
import { findAllTest1 } from '../fn/controller-cart/find-all-test-1';
import { FindAllTest1$Params } from '../fn/controller-cart/find-all-test-1';
import { getCart } from '../fn/controller-cart/get-cart';
import { GetCart$Params } from '../fn/controller-cart/get-cart';
import { getOrCreateActiveCart } from '../fn/controller-cart/get-or-create-active-cart';
import { GetOrCreateActiveCart$Params } from '../fn/controller-cart/get-or-create-active-cart';

@Injectable({ providedIn: 'root' })
export class ControllerCartService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addProductsToCart()` */
  static readonly AddProductsToCartPath = '/api/v1/cart/{clientId}/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addProductsToCart()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProductsToCart$Response(params: AddProductsToCart$Params, context?: HttpContext): Observable<StrictHttpResponse<CartDto>> {
    return addProductsToCart(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addProductsToCart$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addProductsToCart(params: AddProductsToCart$Params, context?: HttpContext): Observable<CartDto> {
    return this.addProductsToCart$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartDto>): CartDto => r.body)
    );
  }

  /** Path part for operation `getCart()` */
  static readonly GetCartPath = '/api/v1/cart/{cartId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCart()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCart$Response(params: GetCart$Params, context?: HttpContext): Observable<StrictHttpResponse<CartDto>> {
    return getCart(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCart$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCart(params: GetCart$Params, context?: HttpContext): Observable<CartDto> {
    return this.getCart$Response(params, context).pipe(
      map((r: StrictHttpResponse<CartDto>): CartDto => r.body)
    );
  }

  /** Path part for operation `getOrCreateActiveCart()` */
  static readonly GetOrCreateActiveCartPath = '/api/v1/cart/getOrCreateActiveCart/{costumerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOrCreateActiveCart()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrCreateActiveCart$Response(params: GetOrCreateActiveCart$Params, context?: HttpContext): Observable<StrictHttpResponse<Cart>> {
    return getOrCreateActiveCart(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOrCreateActiveCart$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOrCreateActiveCart(params: GetOrCreateActiveCart$Params, context?: HttpContext): Observable<Cart> {
    return this.getOrCreateActiveCart$Response(params, context).pipe(
      map((r: StrictHttpResponse<Cart>): Cart => r.body)
    );
  }

  /** Path part for operation `findAllTest1()` */
  static readonly FindAllTest1Path = '/api/v1/cart/findAll';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTest1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTest1$Response(params?: FindAllTest1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CartDto>>> {
    return findAllTest1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTest1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTest1(params?: FindAllTest1$Params, context?: HttpContext): Observable<Array<CartDto>> {
    return this.findAllTest1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CartDto>>): Array<CartDto> => r.body)
    );
  }

  /** Path part for operation `deleteProductFromCart()` */
  static readonly DeleteProductFromCartPath = '/api/v1/cart/{cartId}/remove/{itemId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProductFromCart()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProductFromCart$Response(params: DeleteProductFromCart$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteProductFromCart(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProductFromCart$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProductFromCart(params: DeleteProductFromCart$Params, context?: HttpContext): Observable<string> {
    return this.deleteProductFromCart$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
