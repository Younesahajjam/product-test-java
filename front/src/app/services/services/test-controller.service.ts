/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CostumerDto } from '../models/costumer-dto';
import { createTest } from '../fn/test-controller/create-test';
import { CreateTest$Params } from '../fn/test-controller/create-test';
import { deleteTest } from '../fn/test-controller/delete-test';
import { DeleteTest$Params } from '../fn/test-controller/delete-test';
import { findAllTest } from '../fn/test-controller/find-all-test';
import { FindAllTest$Params } from '../fn/test-controller/find-all-test';
import { findTestById } from '../fn/test-controller/find-test-by-id';
import { FindTestById$Params } from '../fn/test-controller/find-test-by-id';
import { updateTest } from '../fn/test-controller/update-test';
import { UpdateTest$Params } from '../fn/test-controller/update-test';

@Injectable({ providedIn: 'root' })
export class TestControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTest()` */
  static readonly UpdateTestPath = '/api/v1/test/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTest$Response(params: UpdateTest$Params, context?: HttpContext): Observable<StrictHttpResponse<CostumerDto>> {
    return updateTest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTest(params: UpdateTest$Params, context?: HttpContext): Observable<CostumerDto> {
    return this.updateTest$Response(params, context).pipe(
      map((r: StrictHttpResponse<CostumerDto>): CostumerDto => r.body)
    );
  }

  /** Path part for operation `createTest()` */
  static readonly CreateTestPath = '/api/v1/test/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTest$Response(params: CreateTest$Params, context?: HttpContext): Observable<StrictHttpResponse<CostumerDto>> {
    return createTest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTest(params: CreateTest$Params, context?: HttpContext): Observable<CostumerDto> {
    return this.createTest$Response(params, context).pipe(
      map((r: StrictHttpResponse<CostumerDto>): CostumerDto => r.body)
    );
  }

  /** Path part for operation `findTestById()` */
  static readonly FindTestByIdPath = '/api/v1/test/findId/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findTestById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTestById$Response(params: FindTestById$Params, context?: HttpContext): Observable<StrictHttpResponse<CostumerDto>> {
    return findTestById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findTestById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findTestById(params: FindTestById$Params, context?: HttpContext): Observable<CostumerDto> {
    return this.findTestById$Response(params, context).pipe(
      map((r: StrictHttpResponse<CostumerDto>): CostumerDto => r.body)
    );
  }

  /** Path part for operation `findAllTest()` */
  static readonly FindAllTestPath = '/api/v1/test/findAll';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllTest()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTest$Response(params?: FindAllTest$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CostumerDto>>> {
    return findAllTest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllTest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllTest(params?: FindAllTest$Params, context?: HttpContext): Observable<Array<CostumerDto>> {
    return this.findAllTest$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CostumerDto>>): Array<CostumerDto> => r.body)
    );
  }

  /** Path part for operation `deleteTest()` */
  static readonly DeleteTestPath = '/api/v1/test/delete/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTest()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTest$Response(params: DeleteTest$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteTest(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTest(params: DeleteTest$Params, context?: HttpContext): Observable<string> {
    return this.deleteTest$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
