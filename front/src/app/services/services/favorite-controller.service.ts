/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addItemToFavorite } from '../fn/favorite-controller/add-item-to-favorite';
import { AddItemToFavorite$Params } from '../fn/favorite-controller/add-item-to-favorite';
import { FavotiteDto } from '../models/favotite-dto';
import { getAllFavorites } from '../fn/favorite-controller/get-all-favorites';
import { GetAllFavorites$Params } from '../fn/favorite-controller/get-all-favorites';
import { removeItemFromFavorite } from '../fn/favorite-controller/remove-item-from-favorite';
import { RemoveItemFromFavorite$Params } from '../fn/favorite-controller/remove-item-from-favorite';

@Injectable({ providedIn: 'root' })
export class FavoriteControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addItemToFavorite()` */
  static readonly AddItemToFavoritePath = '/v1/api/favorites/add/{customerId}/{itemId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addItemToFavorite()` instead.
   *
   * This method doesn't expect any request body.
   */
  addItemToFavorite$Response(params: AddItemToFavorite$Params, context?: HttpContext): Observable<StrictHttpResponse<FavotiteDto>> {
    return addItemToFavorite(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addItemToFavorite$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addItemToFavorite(params: AddItemToFavorite$Params, context?: HttpContext): Observable<FavotiteDto> {
    return this.addItemToFavorite$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavotiteDto>): FavotiteDto => r.body)
    );
  }

  /** Path part for operation `getAllFavorites()` */
  static readonly GetAllFavoritesPath = '/v1/api/favorites/{customerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllFavorites()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFavorites$Response(params: GetAllFavorites$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<FavotiteDto>>> {
    return getAllFavorites(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllFavorites$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllFavorites(params: GetAllFavorites$Params, context?: HttpContext): Observable<Array<FavotiteDto>> {
    return this.getAllFavorites$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<FavotiteDto>>): Array<FavotiteDto> => r.body)
    );
  }

  /** Path part for operation `removeItemFromFavorite()` */
  static readonly RemoveItemFromFavoritePath = '/v1/api/favorites/remove/{customerId}/{itemId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeItemFromFavorite()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeItemFromFavorite$Response(params: RemoveItemFromFavorite$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return removeItemFromFavorite(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeItemFromFavorite$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeItemFromFavorite(params: RemoveItemFromFavorite$Params, context?: HttpContext): Observable<void> {
    return this.removeItemFromFavorite$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
